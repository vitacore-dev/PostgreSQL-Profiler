#!/bin/bash

# PostgreSQL Profiler - –£–ª—É—á—à–µ–Ω–Ω—ã–π —Å–∫—Ä–∏–ø—Ç —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è
set -e

echo "üöÄ Starting PostgreSQL Profiler deployment..."

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
check_dependencies() {
    echo "üìã Checking dependencies..."
    
    if ! command -v docker &> /dev/null; then
        echo "‚ùå Docker is not installed. Please install Docker first."
        exit 1
    fi
    
    if ! command -v docker compose &> /dev/null; then
        echo "‚ùå Docker Compose is not installed. Please install Docker Compose first."
        exit 1
    fi
    
    echo "‚úÖ Dependencies check passed"
}

# –°–æ–∑–¥–∞–Ω–∏–µ .env —Ñ–∞–π–ª–∞ –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
setup_environment() {
    echo "üîß Setting up environment..."
    
    if [ ! -f .env ]; then
        echo "üìù Creating .env file from template..."
        cp .env.example .env
        echo "‚ö†Ô∏è  Please edit .env file with your configuration before continuing"
        echo "Press Enter to continue after editing .env file..."
        read
    fi
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    source .env
    echo "‚úÖ Environment setup completed"
}

# –°–æ–∑–¥–∞–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
create_directories() {
    echo "üìÅ Creating necessary directories..."
    
    mkdir -p logs
    mkdir -p data/postgres
    mkdir -p data/redis
    mkdir -p nginx/ssl
    
    echo "‚úÖ Directories created"
}

# –°–±–æ—Ä–∫–∞ –∏ –∑–∞–ø—É—Å–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
deploy_containers() {
    echo "üê≥ Building and starting containers..."
    
    # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
    echo "üõë Stopping existing containers..."
    docker compose down --remove-orphans
    
    # –°–±–æ—Ä–∫–∞ –æ–±—Ä–∞–∑–æ–≤
    echo "üî® Building images..."
    docker compose build --no-cache
    
    # –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤
    echo "üöÄ Starting services..."
    docker compose up -d
    
    echo "‚úÖ Containers deployed successfully"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–æ–≤
check_health() {
    echo "üè• Checking service health..."
    
    # –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤
    echo "‚è≥ Waiting for services to start..."
    sleep 30
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ PostgreSQL
    echo "üîç Checking PostgreSQL..."
    if docker compose exec -T postgres pg_isready -U ${POSTGRES_USER:-profiler} > /dev/null 2>&1; then
        echo "‚úÖ PostgreSQL is healthy"
    else
        echo "‚ùå PostgreSQL is not responding"
        return 1
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ Redis
    echo "üîç Checking Redis..."
    if docker compose exec -T redis redis-cli ping > /dev/null 2>&1; then
        echo "‚úÖ Redis is healthy"
    else
        echo "‚ùå Redis is not responding"
        return 1
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ Backend
    echo "üîç Checking Backend API..."
    if curl -f http://localhost:${BACKEND_PORT:-5000}/api/health > /dev/null 2>&1; then
        echo "‚úÖ Backend API is healthy"
    else
        echo "‚ùå Backend API is not responding"
        return 1
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ Frontend
    echo "üîç Checking Frontend..."
    if curl -f http://localhost:${FRONTEND_PORT:-3000} > /dev/null 2>&1; then
        echo "‚úÖ Frontend is healthy"
    else
        echo "‚ùå Frontend is not responding"
        return 1
    fi
    
    echo "‚úÖ All services are healthy"
}

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
initialize_database() {
    echo "üóÉÔ∏è Initializing database..."
    
    # –û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ PostgreSQL
    echo "‚è≥ Waiting for PostgreSQL to be ready..."
    sleep 10
    
    # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π
    echo "üîÑ Running database migrations..."
    docker compose exec backend python -c "
from src.main import app, db
with app.app_context():
    db.create_all()
    print('Database tables created successfully')
"
    
    echo "‚úÖ Database initialized"
}

# –ü–æ–∫–∞–∑ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–∏
show_deployment_info() {
    echo ""
    echo "üéâ PostgreSQL Profiler deployed successfully!"
    echo ""
    echo "üìä Access URLs:"
    echo "   Frontend:  http://localhost:${FRONTEND_PORT:-3000}"
    echo "   Backend:   http://localhost:${BACKEND_PORT:-5000}"
    echo "   API Docs:  http://localhost:${BACKEND_PORT:-5000}/api/docs"
    echo ""
    echo "üîß Management Commands:"
    echo "   View logs:     docker compose logs -f"
    echo "   Stop services: docker compose down"
    echo "   Restart:       docker compose restart"
    echo ""
    echo "üìÅ Important directories:"
    echo "   Logs:     ./logs/"
    echo "   Data:     ./data/"
    echo "   Config:   ./.env"
    echo ""
}

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
main() {
    echo "üîß PostgreSQL Profiler Deployment Script"
    echo "========================================"
    
    check_dependencies
    setup_environment
    create_directories
    deploy_containers
    initialize_database
    check_health
    show_deployment_info
    
    echo "‚úÖ Deployment completed successfully!"
}

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
handle_error() {
    echo ""
    echo "‚ùå Deployment failed!"
    echo "üìã Troubleshooting steps:"
    echo "   1. Check Docker logs: docker compose logs"
    echo "   2. Verify .env configuration"
    echo "   3. Ensure ports are not in use"
    echo "   4. Check system resources"
    echo ""
    echo "üîÑ To retry deployment:"
    echo "   ./deploy.sh"
    echo ""
    exit 1
}

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –æ—à–∏–±–æ–∫
trap handle_error ERR

# –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
main "$@"

